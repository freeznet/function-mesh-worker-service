name: Precommit - E2E Tests
on:
  workflow_run:
    workflows: ["Precommit - Unit Tests"]
    types:
      - completed

jobs:
  no_auth:
    if: >
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: 'Download artifact'
        uses: actions/github-script@v3.1.0
        with:
          script: |
            var artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "pr"
            })[0];
            var download = await github.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/pr.zip', Buffer.from(download.data));
      - run: unzip pr.zip
      - run: |
        export REPO=$(cat ./pr/repo)
        export SHA=$(cat ./pr/sha)
        echo "::set-output name=REPO::$REPO"
        echo "::set-output name=SHA::$SHA"
        id: extract-id

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ steps.extract-id.outputs.SHA }}
          repository: ${{ steps.extract-id.outputs.REPO }}

      - name: Tune Runner VM
        uses: ./.github/actions/tune-runner-vm

      - name: Setup ssh access to build runner VM
        uses: ./.github/actions/ssh-access
        with:
          limit-access-to-actor: true

      - name: clean disk
        if: ${{ steps.check_changes.outputs.docs_only != 'true' }}
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo apt clean
          docker rmi $(docker images -q) -f
          df -h

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Set up yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.6.0/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          yq --help

      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto generate crd model
        run: ./scripts/generate-crd.sh

      - name: Format license
        run: mvn license:format

      - name: Build mesh-worker-service
        run: mvn clean install -DskipTests

      - name: Build pulsar image with mesh-worker-service
        run: |
          PULSAR_IMAGE_TAG=$(mvn -q -Dexec.executable=echo -Dexec.args='${pulsar.version}' --non-recursive exec:exec)
          docker build --tag mesh-worker-service-integration-pulsar:latest --build-arg PULSAR_IMAGE_TAG="$PULSAR_IMAGE_TAG" -f integration-tests/docker/Dockerfile ./
          for img in `docker images | grep -v "mesh-worker-service" | awk '{print $3}'`; do docker rmi $img | true; done

      - name: Deploy k8s cluster env
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 60
          max_attempts: 3
          retry_on: error
          command: |
            .ci/deploy_pulsar_cluster.sh .ci/clusters/values_mesh_worker_service.yaml
          on_retry_command: |
            .ci/cleanup.sh

      - name: verify mesh-worker-service
        timeout-minutes: 15
        run: |
          .ci/verify_mesh_worker_service.sh

      - name: verify package management service
        timeout-minutes: 15
        run: |
          .ci/verify_package_management_service.sh

#      - name: Setup tmate session
#        uses: mxschmitt/action-tmate@v3
#        if: failure()

      - name: Wait for ssh connection when build fails
        uses: ./.github/actions/ssh-access
        if: failure()
        continue-on-error: true
        with:
          action: wait